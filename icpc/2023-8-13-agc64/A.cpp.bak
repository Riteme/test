#include <cstdio>
#include <cassert>
#include <cstring>

#include <vector>
#include <algorithm>

using namespace std;

constexpr int NMAX = 1000;

int cnt[NMAX + 10];
int last = 0;

void submit(int x) {
    printf("%d ", x);
    fflush(stdout);
    assert(cnt[x] > 0);
    cnt[x]--;
    if (last) {
        assert(abs(last - x) >= 1);
        assert(abs(last - x) <= 2);
    } else {
        assert(x == 1);
    }
    last = x;
}

void finalize() {
    puts("");
    assert(last <= 3);
}

int get_d(int x) {
    if (x <= 3)
        return 1;
    return cnt[x - 2] > cnt[x - 1] ? 2 : 1;
}

void solve(int n) {
    for (int i = 1; i < n; i += 2) {
        submit(i);
    }

    int q = n;
    int d = get_d(n);
    while (q > 1) {
        if (cnt[q - d] > 0) {
            submit(q);
            submit(q - d);
        }
        if (q <= 3 && cnt[q] == 1)
            submit(q);
        if (cnt[q] == 0) {
            q -= 1;
            int od = d;
            if (od == 1) {
                if (cnt[q - 1] > 0) {
                    submit(q - 1);
                    d = 2;
                } else if (q > 3) {
                    submit(q - 2);
                    d = 1;
                }
            } else {
                d = get_d(q);
            }
        } else if (d == 2)
            d = 1;
        else
            d = 2;
    }

    finalize();
}

int main() {
    int n;
    scanf("%d", &n);
    for (int i = 1; i <= n; i++) {
        cnt[i] = i;
    }
    solve(n);
    for (int i = 1; i <= n; i++) {
        assert(cnt[i] == 0);
    }
    return 0;
}
